name: simple logger action

permissions:
  contents: write

on: 
  pull_request:
    paths:
      - .github/workflows/python-simple-logger-action.yaml
      - python/simpler-logger/**
  push:
    branches:
      - '*'  # Run on all branches
    paths:
      - .github/workflows/python-simple-logger-action.yaml
      - python/simpler-logger/**

jobs:
  dev_release:
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'  # Run on all branches except main
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Display Version
        run: |
          echo "Development job run..."

  tag_release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'  # Only run on main branch
    env:
      VERSION_PREFIX: python-simpler-logger-
      LOG_PATH: python/simpler-logger
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0

      - name: Get Version
        id: version
        shell: bash
        run: |
          VERSION=$(docker run -v $(pwd):/repo codacy/git-version /bin/git-version \
            --folder /repo \
            --version-prefix ${{ env.VERSION_PREFIX }} \
            --release-branch main)
          
          # Extract version number and combine with prefix
          CLEAN_VERSION="${{ env.VERSION_PREFIX }}$(echo $VERSION | grep -oE '[0-9]+\.[0-9]+\.[0-9]+')"
          
          echo "new-version=$CLEAN_VERSION" >> $GITHUB_OUTPUT
          echo "New Version: $CLEAN_VERSION"
          echo "Raw Version: $VERSION"

      - name: Display Version
        run: |
          echo "Clean version: ${{ steps.version.outputs.new-version }}"

      - name: Create and Push Tag
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git tag -a ${{ steps.version.outputs.new-version }} -m "Release ${{ steps.version.outputs.new-version }}"
          git push origin ${{ steps.version.outputs.new-version }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}